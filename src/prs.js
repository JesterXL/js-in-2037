export const getPullRequests = ({ fetch, token, totalPages }) =>
    Promise.all(
        Array(totalPages)
        .fill(0)
        .map(
            (i, index) =>
                i + index + 1
        )
        .map(
            page =>
                fetchPRs(fetch, token, page)
        )
    )
    .then(
        prsArray =>
            prsArray.flat()
    )
    .then(
        prs =>
            prs.filter(
                pr => pr.draft === false
            )
    )
    .then(
        prs =>
            prs.filter(
                pr =>
                    pr.user.login === 'JesterXL'
            )
    )
    .then(
        prs =>
            Promise.all(
                prs.map(
                    pr =>
                        Promise.all([
                            fetchReviews(fetch, token, pr),
                            fetchComments(fetch, token, pr)
                        ])
                        .then(
                            ([reviews, comments]) =>
                                Promise.resolve([
                                    reviewsToUserReviews(reviews),
                                    commentsToBotReleases(comments)
                                ])
                        )
                        .then(
                            ([reviews, botReports]) =>
                                Promise.resolve({
                                    title: pr.title,
                                    url: pr.html_url,
                                    number: pr.number,
                                    reviews,
                                    status: getPullRequestsStatus(reviews, botReports),
                                    owner: { login: pr.user.login, avatar: pr.user.avatar },
                                    dateGenerated: new Date().toISOString()
                                })
                        )
                )
            )
            
    )


const fetchPRs = (fetch, token, page) =>
    fetch(
        `https://github.com/JesterXL/final-cow-legend/pulls?state=open&per_page=100&page=${page}`,
        {
            headers: {
                accept: 'application/vnd.github+json',
                authorization: `token ${token}`,
                'X-GitHub-Api-Version': '2022-11-28'
            }
        }
    )
    .then( r => r.json() )

const fetchReviews = (fetch, token, pr) =>
    fetch(
        `https://github.com/JesterXL/final-cow-legend/pulls/${pr.number}/reviews`,
        {
            headers: {
                accept: 'application/vnd.github+json',
                authorization: `token ${token}`,
                'X-GitHub-Api-Version': '2022-11-28'
            }
        }
    )
    .then( r => r.json() )

const fetchComments = (fetch, token, pr) =>
    fetch(
        `https://github.com/JesterXL/final-cow-legend/issues/${pr.number}/comments`,
        {
            headers: {
                accept: 'application/vnd.github+json',
                authorization: `token ${token}`,
                'X-GitHub-Api-Version': '2022-11-28'
            }
        }
    )
    .then( r => r.json() )

const reviewsToUserReviews = reviews =>
    reviews.map(
        review => {
            if(review.state === 'APPROVED') {
                return { 
                    login: review.user.login, 
                    avatar: review.user.avatar,
                    reviewState: 'Approved'
                }
            } else if(review.state === 'COMMENTED') {
                return { 
                    login: review.user.login, 
                    avatar: review.user.avatar,
                    reviewState: 'Commented'
                }
            } else {
                return { 
                    login: review.user.login, 
                    avatar: review.user.avatar,
                    reviewState: 'Other'
                }
            }
        }
    )

const commentsToBotReleases = comments =>
    comments.filter(
        comment =>
            comment.user.login === 'bot'
    )
    .map(
        comment =>
            comment.body
    )
    .map(
        body =>
            body.replace(/<\/?[^>]+(>|$)/g, "")
    )
    .map(
        body =>
            body.split('Generated by :CowBot: cowbot via pr_cow_builder').join('')
    )
    .map(
        body => {
            try {
                const result = JSON.parse(body)
                return { success: true, data: result }
            } catch(error) {
                return { success: false, error: error?.message || 'Unknown JSON.parse error.'}
            }
        }
    )
    .filter(
        result =>
            result.sucess === true
    )
    .map(
        result =>
            result.data
    )
    .map(
        botReport => {
            switch(botReport.status.toLowerCase()) {
                case 'awaitingjesterxlapproval':
                    return 'Awaiting JesterXL Approval'
                case 'approved':
                    return 'USDA Seleted, FDIC Approved, Checlist Completed ...S.O.B.'
                case 'releasing':
                    return 'Releasing...'
                case 'failed':
                    return 'Failed to Release'
                case 'unknown':
                    return 'Unknown Status'
                default:
                    throw new Error(`Unknown Release Status: ${json.status}`)
            }
        }
    )

const getPullRequestsStatus = (reviews, botReports) => {
    if(botReports.length > 0) {
        return botReports.at(-1)
    }

    const approved = 
        reviews.filter(
            review => 
                review.state === 'Approved')
        .length
    if(approved >= 2) {
        return 'Request JesterXL Approval to Release'
    } else if(approved === 1) {
        return 'Needs 1 more Approver'
    } else {
        return 'Needs 2 Approvers'
    }
}